IO:
- C: printf
  C++: cout
  C#: system out writeline
  Erlang: io format
  Perl6: say
  Cottontail: say

- Python: log
  Cottontail: note

- Haskell: show/read
  Python: pickle/unpickle
  Cottontail: freeze/unfreeze

- Haskell: </>
  Python: path.sep
  C#: Path.PathSeparator
  Cottontail: path

- Haskell: put-str-ln ''
  Scheme: newline
  Cottontail: newline

Functions:
- C: function
  Java: method
  Scheme: procedure, lambda
  Haskell: function
  Cottontail: function

- Scheme: lambda
  C#: anonymous delegate
  Scala: anonymous function
  Cottontail: deferred operation

- Concat: quote
  Cottontail: defer

- [Scheme, Perl6, C#]: ()
  Haskell: <nothing>
  Powershell: &
  Cottontail: do

- Scheme: lambda()
  Erlang: fun()
  Clojure: fn[]
  Perl5: sub{}
  Haskell: (\->)
  Cottontail: [->]

- Haskell: uncurry
  Cottontail: undo, expand-into? uncurry

Conditions:
- C: switch/case/default
  Haskell: case of
  Perl6: given/when
  Scala: match/case
  Cottontail: matches

- Haskell: case of
  Scala: 
  Cottontail: resolves/to-

- Scheme: cond/else
  Cottontail: when/else

- Coffeescript: yes/on/true
  Cottontail: yes/on/true

- Coffeescript: no/off/false
  Cottontail: no/off/false
  
Exceptions:
- Java: try/catch/finally
  Python: try/catch/ensure
  Cottontail: try/run/on-error/ensure (always?)

Data structures:
- Haskell: map
  Python: dict
  Cottontail: dict

- Python: list
  Cottontail: list

- Haskell: tuple
  Cottontail: list

- C: union
  Haskell: type
  Scala: case class
  Cottontail: variant

- C: enum
  Cottontail: enum

- Haskell: constructor
  Cottontail: box

References:
- Haskell: ioref
  Cottontail: share/.ref

- Haskell: read-ioref
  Clojure: deref, @
  C: *
  Cottontail: *, .ref

- Haskell: write-ioref
  C: *
  Scheme: set!
  Cottontail: $, set-ref

Looping:
- Haskell: mapm_
  Python: for in
  C#: foreach
  Java: for in
  Cottontail: each

Lists:
- [Javascript, Python]: +
  Haskell: ++
  Perl6: ~
  Cottontail: cat

- Haskell: concat
  Python: chain
  Cottontail: join

- Haksell: intercalate
  Python: join
  Cottontail: join-with

- Haksell: concat-map
  Clojure: mapcat
  Cottontail: mapcat

- Python: len
  Haskell: length
  Perl6: scalar
  Clojure: count
  Cottontail: count

- Haskell: foldl0
  Scheme: fold
  Cottontail: reduce

- Haskell: foldl
  Cottontail: fold

- Haskell: foldr
  Cottontail: foldr

- Haskell: scanl
  Python: accumulate
  Cottontail: accumulate

- Python: in
  Haskell: elem
  Cottontail: in

- Haskell: zipWith
  Cottontail: zipmap

- Haskell: singleton
  Scheme: list
  Cottontail: single

- Lisp: car/cdr
  Haskell: head/rest
  Ocaml: hd/tl
  Cottontail: hd/tl

Lazy lists:
- Clojure: vec
  C#: to-array
  Cottontail: uniter

- Cottontail: iter

- Haskell: [1..10], enumFromTo 1 10
  Erlang: seq(1, 10) 
  Cottontail: 1 11 range, 1 11 span

- Haskell: [1..]
  Cottontail: 

Logic:
- [C, Haskell]: &&
  Python: and
  Cottontail: and

- Haskell: and
  Cottontail: all

- Haskell: all/or/[not or]
  Clojure: every?
  Cottontail: every/some/none

- C: ==
  Haskell: ==
  Perl6: ==, eq
  Scheme: =, eq?, eqv?, equal?
  Cottontail: eq

Strings:
- [C#, Python]: format
  C: sprintf
  Cottontail: adlib

- C#: trim
  Python: strip
  Perl6: 
  Cottontail: trim

- Lisp: pprint
  Java: to string
  Python: str
  Cottontail: think
  # Distinct from freeze, this is custom formatting
  # Think before you speak

- Perl: here-doc
  Cottontail: here-doc

- C#: resource.properties.*
  Qt: tr/tr
  KDE: i18n/i18nc/i18np/i18ncp
  C: _/ /ngettext
  Cottontail: tr/trc/trp/trcp
  # trp0 might be good to for "no" and "none", French too "rien"
    # or this should be default behaviour

Special values:
- C: null
  Haskell: nothing/just
  Python: None
  Perl6: undef
  Common Lisp: nil
  Cottontail: nothing/just
  Snowshoe: nil

- Haskell: left/right
  Cottontail: ying/yang

- C: void
  Haskell: unit
  Python: pass
  Cottontail: pass, blank

- Perl: yada yada
  Haskell: undefined
  C#: not yet implemented
  Cottontail: yada yada

- C#: this
  Python: self
  Snowshoe: self, part, topic, tpc, it, wat, rig, jig, sth

Modules:
- [Java, Haskell, Python]: import
  C: include
  C#: using
  Perl6: use
  Cottontail: use

- [C++, C#]: namespace, class
  C: header
  Haskell: module
  Perl6: package, namespace, class
  Cottontail: module

- Haskell: prelude
  C#: system
  C++: std
  Cottontail: core

- [C, Java, Python, Haskell]: library
  Perl6: module
  Cottontail: bundle

- C#: partial
  Haskell: module module
  Perl6: use export
  Cottontail: reroot, link, extend-module?

- Perl6: need
  Haskell: import qualified as
  Cottontail: use as

- Python: from import
  Cottontail: use from

- C++: overload, specialization
  Perl6: overload, multi
  Haskell: instance, overload, pattern matching
  Cottontail: another definition, add-def, homonym, merge-defs, extend-def (vs. extend-enum)

- Cottontail: synonym

- Cottontail: mock

Hidden state:
- Perl6: temp
  Cottontail: shadow

Data:
- Java: instance variable
  Perl6: property
  Cottontail: property

- Cottontail: bless/curse/duck/proxy

- C: struct
  Java: class
  Javascript: object
  Cottontail: struct

- Cottontail: coerce
