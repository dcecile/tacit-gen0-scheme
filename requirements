My problem domain:
1. The system provides the four freedoms of free software to the developers. It must also be available for all major operating system platforms.
2. User input must quickly result in visual and auditory feedback.
3. The system inherently supports non-English languages and cultures--from the code to the application.
4. The system must allow integration of C and C++ programming libraries.
5. Development changes become incorporated in the system without restarting any components.
6. The system's mathematical operators may always be extended by the developer.
7. The system frequently incorporates new artistic and interaction design objectives.
8. Expressive and manageable code is supported by higher order functions and a module system.
9. The system must provide a read-eval-print loop for use with interactive development.
10. There are three kinds of computation bottlenecks: graphics, game logic, and AI.
11. Scalable concurrency may be supported for compute-intensive applications.
12. The system's state is reliably saved and restored, for disconnected continued sessions.
13. Development tools for code coverage, unit testing, simple benchmarks, and performance profiling are provided.

Prototyping developer problems:
1. Structured data specification and usage
2. Code feedback
3. Modules
4. Startup from scratch time
5. Forgiving syntax
6. Resource management
7. Distribution


Requirements:
1. Free software
2. Soft-realtime
3. International
4. C/C++ support
5. Interactive development
6. Interaction-design oriented
7. Expressive
8. Concurrency
9. Serialization
10. Tools


Thesis: How can we make an interactive system that supports experimenting with issues of game design?
- data oriented (game rules)
- interaction-design oriented (user interface, feel)
- artist oriented (story, character, emotion, values, meaning, experience)
- interactive (good designs come from observations on working applications)
- modular (only local changes needed)

Solved problems (giant's shoulders):
- free software (GPL/LGPL)
- soft-realtime (CPU bound: static typing, compiled)
- international (Unicode)
- C/C++ support (libffi)
- expressive (Haskell, Python, Scheme, Forth)
- serialization (YAML, JSON)
- concurrency (Erlang, OpenMP)

