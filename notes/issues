Fundamental:
- releasing
- the core language requires a large set of functional-programming semantics: tail calls, closrues, copy-on-write, pointers...

Globalization:
- accurate translations (Japanese/French)
  - function names
  - keyboard/symbol mapping
  - automatic transliteration
- internationalized literal number parsing
- identifier parsing affected by internationalized syntax
- good enough host language
  - validation
  - normalization
  - properties
  - TTY string width (alternate: TTY colour)
  - character count
  - IO
  - literals (maybe)
- locale effects:
  - number formats
  - date formats
  - developer error messages
  - user error messages
  - log messages
  - UI strings
  - string sorting, casing
  - keyboard hotkeys
  - linebreaking
  - translation source
- overriding the locale for custom behaviour (eg. better string collation for my locale)
- custom locales (eg. Punjabi Canada)
- Unicode lexing considerations:
  - identifier/security:
      - combining character order (hopefully normalization takes care of it) (non-interacting vs. interacting composing characters)
      - overlaid diacritics (likely imposible, or do "search without accents" like NFD)
  - don't break ligated glyphs like fi and SS
  - BIDI expression error indicators (eg. TTY colour)
  - combining characters on whitespace
  - locale-specific number format
    - without writing identifiers impossible to use in other locales
  - format characters required for correct rendering of identifiers - equality tests that eat and match trailing combining marks
  - normalization (Unicode and linebreak) without breaking literal strings
- UI language and text rendering (Qt & GTK)
- browsing (or downloading) code with localized APIs and syntax
  - requires all function names in a module to be of the same language (or annotated otherwise)
  - variables won't be localized usually
  - syntax needs tagging as well
  - translated on an any-to-target basis
  - and numbers
- how to localize APIs (especially for finding translations)
- syntax that doesn't interfere with CKJV IME
- localized numbers in YAML

Genericism:
- iter and zip
- recursive types (x def: "hi" [x]) (denotationally impossible types)
- superb type inference
- type ambiguity resolution helpers
- internal versus external reqs (+ resolving variants)
  - try to restrict internal requirements to pure functions, no shadow-variable stuff (eg x &= req-nothing)
- generic inferred deserialization (with intentional or accidental ambiguity, and with dynamic typing)
- typed fixup functions
- specializing code paths once a type is determined
  - this is run-time compile dispatch
  - eg. read a file but detect the text encoding, then specialize at runtime for UTF-{8,16{LE,BE},32{LE,BE}}
- number ambiguity: integer, floating point, fixed point, user-defined
  - all fixnums are user-defined
  - lossless fraction is another good type
  - see "numeric-prelude" on Hackage for an extensible numeric tower
- string, list, and lambda literal casting just like for numbers
- coroutines

Coroutines:
- custom iters using yield (eg. pure coroutines over continuations)
- coroutine basis
- finite and infinite ranges
- typing/channels

Concurrency/parallelism:
- consolidating eventing, coroutines, threads, actors, channels, CSP, and cooperative multithreading
- utility of user threads
- shaped parallel arrays: http://hackage.haskell.org/package/repa

Syntax:
- control-flow keywords and shadowing (eg. run, else...)
- flow-style needs to be weeded out, and a sound syntax determined
- bland syntax (try highlighting)
- backwards lists (rev fn?)
  - eg. reading order joining:
    - ["Hello " "I am" " Dan"] `cat
    - [[1 2 3] [4] [5 6]] `cat
- custom control-flow syntax
- monads
- string localization syntax
  - format strings that aren't really annoying for Japanese translators and are okay for quick hacks
  - comments
  - translation workflow (review, notes, updated source, ignored autoinclude)
  - i18n string literal management: archived decisions on whether to translate strings or not
  - plurals
- multisetref shortcut
- constrained matrices
- using = for impure reference updates doesn't rebind so maybe use a different symbol?
  - eg. x.$y $= 3
- string literal escapes
  - Unicode specifically avoided escape sequences due to context dependencies
  - just use other delimiters
  - or name the codepoint
  - or write the codepoint number (U+0020 is a valid identifier, or it could be primitive)
  - what about format strings?
  - yet still localizable (eg. localize an evaluation)
  - test:
      simplistic: "Status: 302 Moved Temporarily\(newline)Location: {0}\(newline)" tr
      legacy: "Status: 302 Moved Temporarily\nLocation: {0}\n" tr
      expression: ["Status: 302 Moved Temporarily" newline "Location: {0}" newline] join tr
- localizable expressions
- lightweight self-describing assertions
- abiguous list/lambda
  - resolved by "list/seq/ls" function (with rseq and iseq variants?)
  - or by more syntax
- full expressions inside string escapes (or in string formats)
  - to combat regex nastiness
- less authority: allow recursive assignment
  - mutual recursion through a temporary struct
  - possible with value types? no
- effective colons and brackets in flow style

Feedback:
- parsing error messages

Text:
- string equality checks and normalization
- string collation and normalization

Performance:
- C++ const-ref/ref and closures
- really good list fusion and array slices
- debugging including TCO (note Pure's sacrifices)

Names:
- namings of map/filter/reduce commbos (zip, maybe, cat)
- namings of reduce variants (cat, plus, and)
  - eg. ^+ ([+] 0 reduce0), ^cat ([cat] empty reduce0), 
- automated testing APIs
- tool names: profiler, LHF, coverage, tester, package manager
- names for syntax: colon, double colon, braces, semicolon, comma, period
- name for "use but don't dump into my namespace"
  - useful, or not? (ie. restricted @ns symbols)
- purity enforcement context

Teaching:
- loops for imperative beginners/oldtimers

Deployment:
- installer support
- security/trust

Best practices:
- local variable names:
  - single letters
  - capitals and hyphens
- title-cased anything with zero-arity, including enums
- mocking
- genericism and property names

Serialization:
- localized serialized numbers (eg. 1.990,32)
  - locale attribute on the file?
  - use a metapair: """
    ~~tag:
      number-locale: de-DE
      data:
      - dlska
      ...
    """
  - viability of crazy commas and quote marks and spaces in YAML
- property name ambiguity

Theory:
- link in syntax and semantics:
  - list definition
  - operation results capture
  - operation delay
  - coroutine

Interactivity:
- integrated REPL and edit-and-continue and live coding as good as:
  - Squeak
  - Gambit & iPhone
  - Fluxus
  - Erlang
- REPL commands as good as:
  - irb
- record events to aid debugging
- logging complex values creates new variables that can be examined at will
  - eg. [1, 2, 3, ...] # see i832
- stepping scope (ie. don't step into simple list HOFs, even if they're not built in)

Meta-platform:
- high performance timers
- resource management
- ^C interrupt, at least for infinite REPL loops
- generate ELF symbols for using oprofile (see CCL)
- functions for pointfree postfix, to work around the lack of mutable caller stack (eg. when-dup)
